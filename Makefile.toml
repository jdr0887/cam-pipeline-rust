[env]
CARGO_MAKE_EXTEND_WORKSPACE_MAKEFILE = true
RUST_LOG = "info"
#RUST_LOG = "debug"
PIPELINE_WORK_DIR = "src/data"

# [tasks.default]
# clear = true
# dependencies = ["build"]

# ---- BUILD ----
[tasks.build]
description = "Build"
clear = true
command = "cargo"
args = ["build", "--release"]

[tasks.reset]
description = "reset"
script = [
    'find ${PIPELINE_WORK_DIR} -type f ! -name "biolink-local.ttl" ! -name "chebi_mesh.tsv" ! -name "ontologies.ttl" ! -name "ubergraph-axioms.ttl" ! -name "uniprot-to-ncbi-rules.ttl" ! -name "uniprot-to-ncbi.txt" -exec rm {} +'
]

[tasks.create_base_ontology]
condition = { files_not_exist = ["${PIPELINE_WORK_DIR}/ontologies.nt"] }
description = "create base ontology"
command = "target/release/create_base_ontology"

[tasks.create_noctua_reactome_ontology]
condition = { files_not_exist = ["${PIPELINE_WORK_DIR}/noctua-reactome-ontology.nt"] }
description = "create noctua reactome ontology"
command = "target/release/create_noctua_reactome_ontology -w ${PIPELINE_WORK_DIR}"

[tasks.prep]
run_task = { name = ["create_base_ontology", "create_noctua_reactome_ontology"], parallel = true }
dependencies = ["build"]

[tasks.get-noctua-reactome-ctd-models-xml-file]
condition = { files_not_exist = ["${PIPELINE_WORK_DIR}/CTD_chem_gene_ixns_structured.xml"] }
script = [
    "curl -L -O 'http://ctdbase.org/reports/CTD_chem_gene_ixns_structured.xml.gz'",
    "gunzip CTD_chem_gene_ixns_structured.xml.gz",
]

[tasks.create-noctua-reactome-ctd-models]
script = [
    #"/home/jdr0887/workspace/github/balhoff/ctd-to-owl/target/universal/stage/bin/ctd-to-owl CTD_chem_gene_ixns_structured.xml src/data/noctua-reactome-ctd-models.jnl blazegraph.properties chebi_mesh.tsv"
    "ctd-to-owl -i ${PIPELINE_WORK_DIR}/CTD_chem_gene_ixns_structured.xml -o ${PIPELINE_WORK_DIR}/CTD_chem_gene_ixns_structured.owx"
]
dependencies = ["prep", "get-noctua-reactome-ctd-models-xml-file"]

[tasks.construct_mesh_chebi_links]
description = "construct mesh chebi links"
command = "target/release/construct_mesh_chebi_links"

[tasks.construct_protein_subclasses]
description = "construct protein subclasses"
command = "target/release/construct_protein_subclasses"

[tasks.construct_reacto_uniprot_rules]
description = "construct reacto uniprot rules"
command = "target/release/construct_reacto_uniprot_rules"

[tasks.construct_ncbi_gene_classes]
condition = { files_exist = ["${PIPELINE_WORK_DIR}/uniprot-to-ncbi-rules.ttl"] }
description = "construct ncbi gene classes"
command = "target/release/construct_ncbi_gene_classes"

[tasks.construct_biolink_class_hierarchy]
description = "construct biolink class hierarchy"
command = "target/release/construct_biolink_class_hierarchy"

[tasks.construct_ont_biolink_subclasses]
description = "construct ont biolink subclasses"
command = "target/release/construct_ont_biolink_subclasses"

[tasks.construct_slot_mappings]
description = "construct slot mappings"
command = "target/release/construct_slot_mappings"

[tasks.get_biolink_model]
description = "get biolink model"
command = "target/release/get_biolink_model"

[tasks.construct]
run_task = { name = ["construct_mesh_chebi_links", "construct_protein_subclasses", "construct_reacto_uniprot_rules", "construct_ncbi_gene_classes", "construct_biolink_class_hierarchy", "construct_ont_biolink_subclasses", "construct_slot_mappings"], parallel = true }
dependencies = ["prep", "get_biolink_model"]

[tasks.create_merged_ontologies]
description = "create merged ontologies"
command = "target/release/create_merged_ontologies"
dependencies = ["construct"]

[tasks.construct_is_defined_by]
description = "construct is_defined_by"
command = "target/release/construct_is_defined_by"

[tasks.construct_subclass_closure]
description = "construct subclass closure"
command = "target/release/construct_subclass_closure"
